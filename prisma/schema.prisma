generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  admin   Admin?
  doctor  Doctor?
  patient Patient?

  @@map("users")
}

model Admin {
  id            String  @id @default(uuid())
  name          String
  email         String  @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Doctor {
  id                  String  @id @default(uuid())
  name                String
  email               String  @unique
  profilePhoto        String?
  contactNumber       String
  address             String?
  registrationNumber  String
  experience          Int     @default(0)
  gender              Gender
  appointmentFee      Int
  averageRating       Float   @default(0.0)
  qualification       String
  currentWorkingPlace String
  designation         String
  isDeleted           Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  doctorSpecialties DoctorSpecialties[]
  doctorSchedules   DoctorSchedules[]
  appointment       Appointment[]
  prescription      Prescription[]
  review            Review[]

  @@map("doctors")
}

model Patient {
  id            String  @id @default(uuid())
  name          String
  email         String  @unique
  profilePhoto  String?
  contactNumber String
  address       String?
  isDeleted     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  patientHealthData PatientHealthData?
  medicalReport     MedicalReport[]
  appointment       Appointment[]
  prescription      Prescription[]
  review            Review[]

  @@map("patients")
}

model Specialties {
  id    String @id @default(uuid())
  title String
  icon  String

  doctorSpecialties DoctorSpecialties[]

  @@map("specialties")
}

model DoctorSpecialties {
  specialtiesId String
  doctorId      String

  specialties Specialties @relation(fields: [specialtiesId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])

  @@id([specialtiesId, doctorId])
  @@map("doctor_specialties")
}

model PatientHealthData {
  id                  String        @id @default(uuid())
  patientid           String        @unique
  gender              Gender
  dateOfBirth         String
  bloodGroup          BloodGroup
  hasAllergies        Boolean?      @default(false)
  hasDiabetes         Boolean?      @default(false)
  height              String
  weight              String
  smokingStatus       Boolean?      @default(false)
  dietaryPreferensec  String?
  pregnancyStatus     Boolean?      @default(false)
  mentalHealthHistory String?
  immunizationStatus  String?
  hasPastSurgeries    Boolean?      @default(false)
  recentAnxiety       Boolean?      @default(false)
  recentDepression    Boolean?      @default(false)
  maritalStatus       MaritalStatus @default(UNMARRIED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient Patient @relation(fields: [patientid], references: [id])

  @@map("patient_health_datas")
}

model MedicalReport {
  id         String @id @default(uuid())
  patientId  String
  reportName String
  reportLink String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id])

  @@map("medical_reports")
}

model Schedule {
  id            String   @id @default(uuid())
  startDateTime DateTime
  endDateTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctorSchedules DoctorSchedules[]
  appointment     Appointment?

  @@map("schedules")
}

model DoctorSchedules {
  doctorId      String
  scheduleId    String
  isBooked      Boolean @default(false)
  appointmentId String? @unique

  doctor      Doctor       @relation(fields: [doctorId], references: [id])
  schedule    Schedule     @relation(fields: [scheduleId], references: [id])
  appointment Appointment? @relation(fields: [appointmentId], references: [id])

  @@id([doctorId, scheduleId])
  @@map("doctor_schedules")
}

model Appointment {
  id             String            @id @default(uuid())
  patientId      String
  doctorId       String
  scheduleId     String            @unique
  videoCallingId String
  status         AppointmentStatus @default(SCHEDULED)
  paymentStatus  PaymentStatus     @default(UNPAID)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient  Patient  @relation(fields: [patientId], references: [id])
  doctor   Doctor   @relation(fields: [doctorId], references: [id])
  schedule Schedule @relation(fields: [scheduleId], references: [id])

  doctorSchedules DoctorSchedules?
  payment         Payment?
  prescription    Prescription?
  review          Review?

  @@map("appointments")
}

model Payment {
  id                 String        @id @default(uuid())
  appointmentId      String        @unique
  amount             Float
  transactionId      String        @unique
  status             PaymentStatus @default(UNPAID)
  paymentGatewayData Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [id])

  @@map("payments")
}

model Prescription {
  id            String    @id @default(uuid())
  appointmentId String    @unique
  doctorId      String
  patientId     String
  instructions  String
  followUpDate  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])
  patient     Patient     @relation(fields: [patientId], references: [id])

  @@map("prescriptions")
}

model Review {
  id            String @id @default(uuid())
  patientId     String
  doctorId      String
  appointmentId String @unique
  rating        Float
  comment       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient     Patient     @relation(fields: [patientId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])
  appointment Appointment @relation(fields: [appointmentId], references: [id])

  @@map("reviews")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  Male
  Female
}

enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}

enum AppointmentStatus {
  SCHEDULED
  INPROGRESS
  COMPLETED
  CANCEL
}

enum PaymentStatus {
  PAID
  UNPAID
}
